//using Ganss.Xss;using JWTAuthentication.Authentication;using Microsoft.AspNetCore.Authorization;using Microsoft.AspNetCore.Cors;using Microsoft.AspNetCore.Http;using Microsoft.AspNetCore.Identity;using Microsoft.AspNetCore.Mvc;using Microsoft.EntityFrameworkCore;using Microsoft.Extensions.Configuration;using Microsoft.IdentityModel.Tokens;using ReactWithASP.Server.Models;using SendGrid.Helpers.Mail;using System;using System.Collections.Generic;using System.IdentityModel.Tokens.Jwt;using System.Linq;using System.Security.Claims;using System.Text;using System.Threading.Tasks;using System.Xml.Linq;using static YourNamespace.Controllers.AccountController;namespace ReactWithASP.Server.Controllers{    [Route("api")]    [ApiController]    public class PrivacyPolicyController : ControllerBase    {        private readonly ApplicationDbContext _context;        private readonly UserManager<ApplicationUser> _userManager;        public PrivacyPolicyController(UserManager<ApplicationUser> userManager, ApplicationDbContext context)        {            _userManager = userManager;            _context = context;        }

        [HttpPost("SavePrivacyPolicy")]        public async Task<IActionResult> SavePrivacyPolicy([FromBody] PrivacyPolicy model)        {            if (!ModelState.IsValid)            {                return BadRequest(ModelState);            }            PrivacyPolicy result = new PrivacyPolicy            {                CreatedOn = DateTime.Now,                Content = model.Content.Replace("\n", ""),                Meta_Description = model.Meta_Description,                Username = model.Username,            };            _context.PrivacyPolicy.Add(result);            await _context.SaveChangesAsync();            return Ok(new            {                Status = "True",                Message = "Content saved successfully.",                Data = result            });        }        [HttpGet("GetPrivacyPolicyInfo")]
        public async Task<IActionResult> GetPrivacyPolicyInfo()
        {
            var data = await _context.PrivacyPolicy.ToListAsync();
            return Ok(data);
        }    }}